######################################################################
#
#   Universal makefile for GCC based projects.
#
######################################################################
#
#   2010-10-10  asc Creation.
#   2012-08-22  asc Adapted to use config files.
#   2012-11-20  asc Created discrete C and CPP translator aliases.
#   2012-12-03  asc Added support for DLL builds.
#   2013-04-10  asc Added support for shared object builds.
#   2021-12-16  asc Adapted to use unix find rather than gnu find.
#   2022-04-07  asc Separated CPPFLAGS, removed -v from rm, and -iname from find.
#   2022-06-07  asc Cleaned up compiler flags.
#   2022-09-23  asc Added compiler flags to dependency generation.
#   2022-09-23  asc Replaced @if [ -e with -f for /bin/sh compatibility.
#   2022-10-06  asc Added LOCAL_LIBS and LOCAL_INCS.
#   2022-10-06  asc Switched from = to := where possible (expand at assignment).
#   2022-10-07  asc Added $(strip ...) to compact the white space in parameters.
#   2023-01-04  asc Changed CPP and CPPFLAGS to CXX and CXXFLAGS.  Added AR.
#   2023-02-07  asc Restructured and extended dependency variables.
#
######################################################################

#
# Build Environment Configuration
#
include buildconf.inc

#
# Determine File Extensions
#
ifeq ($(LIBRARY_BUILD), false)
	EXT := $(EXEC_EXT)
else
    ifeq ($(LIBRARY_TYPE), static)
		EXT := $(STATIC_LIB_EXT)
    endif

    ifeq ($(LIBRARY_TYPE), shared)
		EXT := $(SHARED_LIB_EXT)
    endif
endif

#
# Create List of Virtual Paths (allows output directory different than source directory)
#
VPATH := $(OBJ_PATH) $(shell find -L $(SRC_PATH) -type d -print | tr '\n' ' ')

#
# Build Tool Binary Aliases
#
AR := $(BUILD_TOOL)ar
AS := $(BUILD_TOOL)as
CC := $(BUILD_TOOL)gcc
CXX := $(BUILD_TOOL)g++
LD := $(BUILD_TOOL)ld
OD := $(BUILD_TOOL)objdump
OC := $(BUILD_TOOL)objcopy
ST := $(BUILD_TOOL)strip
RM := rm

#
# Create List of Compiler and Linker Flags
#
CXXFLAGS := $(PLATFORM_CXXFLAGS) $(PROJECT_CXXFLAGS) $(LOCAL_CXXFLAGS)
CFLAGS := $(PLATFORM_CFLAGS) $(PROJECT_CFLAGS) $(LOCAL_CFLAGS)
LFLAGS := $(PLATFORM_LFLAGS) $(PROJECT_LFLAGS) $(LOCAL_LFLAGS)

#
# Create List of Source Files
#
SRCS := $(shell find -L $(SRC_PATH) \( -name "*.cpp" -o -name "*.c" -o -name "*.CPP" -o -name "*.C" \) -print | xargs -L 1 basename | tr '\n' ' ')

#
# Create List of Object Files
#
BASE := $(basename $(SRCS))
OBJS := $(BASE:%=$(OBJ_PATH)/%.o)

#
# Create List of Dependency Files
#
DEP_FILES := $(OBJS:.o=.d)

#
# Create List of Dependency Objects
#
DEPS := $(PLATFORM_DEPS) $(PROJECT_DEPS) $(LOCAL_DEPS)

#
# Create List of Include Paths
#
INCS := $(shell find -L $(SRC_PATH) -type d -print | sed -e 's/^/-I/g' | tr '\n' ' ') $(PLATFORM_INCS) $(PROJECT_INCS) $(LOCAL_INCS)

#
# Create List of Libraries
#
LIBS = $(PLATFORM_LIBS) $(PROJECT_LIBS) $(LOCAL_LIBS)

#
# Phony targets
#
.PHONY: all clean

#
# Default rules for compiling/assembling C and C++ files
#
%.o: %.c
	$(strip $(CC) $(CFLAGS) $(INCS)) -c $< -o $@

%.o: %.cpp
	$(strip $(CXX) $(CFLAGS) $(CXXFLAGS) $(INCS)) -c $< -o $@

$(OBJ_PATH)/%.o: %.c
	@mkdir -p $(OBJ_PATH)
	$(strip $(CC) $(CFLAGS) $(INCS)) -c $< -o $@

$(OBJ_PATH)/%.o: %.cpp
	@mkdir -p $(OBJ_PATH)
	$(strip $(CXX) $(CFLAGS) $(CXXFLAGS) $(INCS)) -c $< -o $@

#
# Rule to build all
#
all: $(NAME)$(EXT)
	@echo Build successful.

#
# Rule to make target
#
$(OBJ_PATH)/$(NAME)$(EXT): $(OBJS) $(DEPS)
ifeq ($(LIBRARY_BUILD), false)
	$(strip $(CXX) $(LFLAGS)) -o $@ $(OBJS) $(LIBS)
else
    ifeq ($(LIBRARY_TYPE), static)
	    $(AR) crv $@ $(OBJS)
    endif

    ifeq ($(LIBRARY_TYPE), shared)
#	    $(strip $(CXX) $(LFLAGS)) -shared -o $@ -Wl,--out-implib=$(OBJ_PATH)/$(NAME).$(STATIC_EXT) -Wl,--export-all-symbols -Wl,--enable-auto-import -Wl,--whole-archive $(OBJS) -Wl,--no-whole-archive $(LIBS)
#	    $(strip $(CXX) $(LFLAGS)) -shared -o $@ -Wl,--out-implib=$(OBJ_PATH)/$(NAME).$(STATIC_EXT) $(OBJS) $(LIBS)
	    $(strip $(CXX) $(LFLAGS)) -shared -o $@ $(OBJS) $(LIBS)
    endif
endif
	@if [ -f "postbuild.sh" ]; then ./postbuild.sh $@; fi

#
# Rules for updating dependencies
#
$(OBJ_PATH)/%.d: %.c
	@mkdir -p $(OBJ_PATH)
	$(strip $(CC) $(CFLAGS) $(INCS)) -MM -MT $(OBJ_PATH)/$(subst .c,.o,$(notdir $^)) $^ > $@

$(OBJ_PATH)/%.d: %.cpp
	@mkdir -p $(OBJ_PATH)
	$(strip $(CXX) $(CFLAGS) $(CXXFLAGS) $(INCS)) -MM -MT $(OBJ_PATH)/$(subst .cpp,.o,$(notdir $^)) $^ > $@

#
# Rule for cleaning up the build objects
#
clean:
	@if [ -d "$(OBJ_PATH)" ]; then $(RM) -rf "$(OBJ_PATH)"; fi

#
# Project Build Rules
#
-include $(PROJECT_MAKE)

#
# Include dependency files generated above
#
ifneq ($(MAKECMDGOALS),clean)
-include $(DEP_FILES)
endif
